#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include "MD_Parola.h"
#include "MD_MAX72xx.h"
#include "SPI.h"

// Define hardware type, size, and output pins:
#define HARDWARE_TYPE MD_MAX72XX::FC16_HW
#define MAX_DEVICES 8

#define CS_PIN 5
#define DATA_PIN 16
#define CLK_PIN 4

MD_Parola myDisplay = MD_Parola(HARDWARE_TYPE, DATA_PIN, CLK_PIN, CS_PIN, MAX_DEVICES);
MD_MAX72XX mx = MD_MAX72XX(HARDWARE_TYPE, CS_PIN, MAX_DEVICES);

// WiFi credentials ADD YOUR DATA HERE
const char* ssid = "X";
const char* password = "Y";

// CoinGecko API - HTTPS required
const char* API_HOST = "api.coingecko.com";
const char* API_PATH = "/api/v3/simple/price?ids=bitcoin&vs_currencies=usd,eur";
const int API_PORT = 443; // HTTPS port

// Global variables to store the current prices
String currentUsdPrice = "";
String currentEurPrice = "";

void setup() {
  Serial.begin(9600);

  // Initialize the display
  myDisplay.begin();
  myDisplay.setIntensity(15);
  myDisplay.displayClear();
  myDisplay.setTextAlignment(PA_CENTER);
  myDisplay.print("Wifi loading");

  // Connect to Wi-Fi with timeout
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(2000);
    Serial.print("Connecting to WiFi... Status: ");
    Serial.println(WiFi.status());
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    myDisplay.print("WiFi OK");
    delay(2000);
  } else {
    Serial.println("WiFi connection failed!");
    myDisplay.print("WiFi FAIL");
    delay(5000);
  }
  
  // Fetch initial prices
  fetchBitcoinPrices();
}

void loop() {
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected, reconnecting...");
    myDisplay.print("WiFi Lost");
    delay(5000);
    return;
  }

  // Main display cycle: USD -> TEXT -> EUR -> TEXT -> FETCH -> REPEAT
  
  // 1. Show USD price
  if (currentUsdPrice != "") {
    display(currentUsdPrice, " USD");
  }
  
  // 2. Show EUR price  
  if (currentEurPrice != "") {
    display(currentEurPrice, " EUR");
  }
  
  // 3. Fetch fresh data for next cycle
  fetchBitcoinPrices();
  
  // Small delay before next cycle
  delay(1000);
}

// Function to format number with thousand separators
String formatPrice(String price, char separator) {
  // Remove any existing separators and whitespace
  price.trim();
  
  // Remove decimal part if present
  int decimalIndex = price.indexOf(".");
  if (decimalIndex != -1) {
    price = price.substring(0, decimalIndex);
  }
  
  // Convert to integer and back to string to ensure it's clean
  long priceValue = price.toInt();
  price = String(priceValue);
  
  // Add thousand separators
  String formattedPrice = "";
  int len = price.length();
  
  for (int i = 0; i < len; i++) {
    if (i > 0 && (len - i) % 3 == 0) {
      formattedPrice += separator;
    }
    formattedPrice += price.charAt(i);
  }
  
  return formattedPrice;
}

bool fetchBitcoinPrices() {
  Serial.println("Fetching Bitcoin price...");
   myDisplay.print("");
  
  // Use WiFiClientSecure for HTTPS connections
  WiFiClientSecure client;
  client.setInsecure(); // Skip certificate verification
  
  Serial.print("Connecting to: ");
  Serial.println(API_HOST);
  
  // Connect to HTTPS port (443)
  if (!client.connect(API_HOST, API_PORT)) {
    Serial.println("Connection to API failed");
    myDisplay.print("API FAIL");
    delay(3000);
    return false;
  }
  
  Serial.println("Connected! Sending request...");
  
  // Send HTTP request
  client.print(String("GET ") + API_PATH + " HTTP/1.1\r\n" +
               "Host: " + API_HOST + "\r\n" +
               "User-Agent: ESP8266\r\n" +
               "Connection: close\r\n\r\n");

  // Wait for response with timeout
  unsigned long timeout = millis() + 10000; // 10 second timeout
  while (client.available() == 0) {
    if (millis() > timeout) {
      Serial.println("Client timeout!");
      client.stop();
      myDisplay.print("Timeout");
      // delay(3000);
      return false;
    }
  }

  // Read the COMPLETE response including headers
  String fullResponse = "";
  while (client.available()) {
    char c = client.read();
    fullResponse += c;
  }
  
  // Serial.println("=== FULL RESPONSE START ===");
  // Serial.println(fullResponse);
  // Serial.println("=== FULL RESPONSE END ===");
  
  // Check for rate limit response
  if (fullResponse.indexOf("429") != -1 || fullResponse.indexOf("Too Many Requests") != -1) {
    Serial.println("Rate limited! Waiting longer...");
    myDisplay.print("Rate Limit");
    delay(5000);
    client.stop();
    return false;
  }
  
  // Find where the JSON body starts (after double newline)
  int bodyStart = fullResponse.indexOf("\r\n\r\n");
  if (bodyStart == -1) {
    bodyStart = fullResponse.indexOf("\n\n");
  }
  
  String response = "";
  if (bodyStart != -1) {
    response = fullResponse.substring(bodyStart + 4);
    Serial.println("=== JSON BODY ===");
    Serial.println(response);
  } else {
    Serial.println("Could not find response body!");
    myDisplay.print("No Body");
    delay(3000);
    client.stop();
    return false;
  }
  
  // Parse the JSON response
  // CoinGecko returns: {"bitcoin":{"usd":45000,"eur":41000}}
  
  // Serial.print("Response length: ");
  // Serial.println(response.length());
  // Serial.print("Looking for 'bitcoin' in response: ");
  // Serial.println(response.indexOf("bitcoin"));
  
  // Check if we got a valid JSON response
  if (response.indexOf("{") == -1) {
    Serial.println("No JSON found in response");
    myDisplay.print("No JSON");
    delay(3000);
    client.stop();
    return false;
  }
  
  bool success = false;
  
  // Extract USD price
  int usdIndex = response.indexOf("\"usd\":");
  Serial.print("USD index: ");
  Serial.println(usdIndex);
  
  if (usdIndex == -1) {
    // Try alternative patterns
    usdIndex = response.indexOf("usd\":");
    if (usdIndex != -1) usdIndex += 4;
    Serial.print("Alternative USD index: ");
    Serial.println(usdIndex);
  }
  
  if (usdIndex != -1) {
    usdIndex += 6; // Move past "usd":
    int usdEndIndex = response.indexOf(",", usdIndex);
    if (usdEndIndex == -1) {
      usdEndIndex = response.indexOf("}", usdIndex);
    }
    
    if (usdEndIndex != -1) {
      String usdPrice = response.substring(usdIndex, usdEndIndex);
      usdPrice.trim();
      Serial.println("USD Price: " + usdPrice);
      
      // Format price with comma as thousand separator for USD
      currentUsdPrice = formatPrice(usdPrice, ',');
      Serial.println("Formatted USD Price: " + currentUsdPrice);
      success = true;
    }
  }
  
  // Extract EUR price
  int eurIndex = response.indexOf("\"eur\":");
  if (eurIndex != -1) {
    eurIndex += 6; // Move past "eur":
    int eurEndIndex = response.indexOf("}", eurIndex);
    
    if (eurEndIndex != -1) {
      String eurPrice = response.substring(eurIndex, eurEndIndex);
      eurPrice.trim();
      Serial.println("EUR Price: " + eurPrice);
      
      // Format price with dot as thousand separator for EUR
      currentEurPrice = formatPrice(eurPrice, '.');
      Serial.println("Formatted EUR Price: " + currentEurPrice);
      success = true;
    }
  }
  
  client.stop();
  
  if (!success) {
    Serial.println("Failed to parse price data");
    myDisplay.print("Parse Error");
    delay(3000);
    return false;
  }
  
  // Add a small delay to respect rate limits (about 12 calls per minute max)
  //delay(5000);
  
  return true;
}

String* pool() {
  static String poolArr[] = {
    "HODL",
    "Freedom",
    "Escape FIAT",
    "Hard money",
    "Self custody",
    "Revolution",
    "Ungovernable",
    "Digital Gold",
    "Borderless",
    "21.000.000",
    "Fck u money!",
    "Lazer eyes!",
    "Immutable",
    "Blockchain",
    "Number #1",
    "SHA-256",
    "Scarce supply",
    "Hardcoded",
    "Decentral",
    "Virtue",
    "Satoshi",
    "Justice",
    "Fix the money",
    "DeFi",
    "To the Moon!",
    "Trustless",
    "Permissionless",
    "Stacking Sats",
    "P2P", 
    "Store of Value",
    "Antifragile",
    "Hydra",
    "Unique",
    "Dynamic",
    "Democratic",
    "Disruptive",
    "Honest",
    "Hope"
  };
  return poolArr;
}

void display(String price, String currency) {
  // Ensure display is clear and at full brightness
  myDisplay.displayClear();
  myDisplay.setIntensity(15);
  myDisplay.setTextAlignment(PA_CENTER);

  String majorArr[] = { price + currency };

  fadeAnyMajor(majorArr, 0);  // show price
  fadeRandomText();
}

void fadeAnyMajor(String* majorArr, int arrPos) {
  fadeIn(arrPos, majorArr, 50);
  delay(25000);
  fadeOut(arrPos, majorArr, 50);
}

void fadeRandomText() {
  int rnd = getRandomNum();  
  String* arr = pool();
  fadeIn(rnd, arr, 50);
  delay(1000);
  Serial.println(arr[rnd] + " /// " + rnd);
  fadeOut(rnd, arr, 50);
}

static int lastRandomNumbers[3] = {-1, -1, -1};

int getRandomNum() {
    int rnd;
    do {
        rnd = random(0, 38);
    } while (isDuplicate(rnd));
    
    lastRandomNumbers[0] = lastRandomNumbers[1];
    lastRandomNumbers[1] = lastRandomNumbers[2];
    lastRandomNumbers[2] = rnd;
    
    return rnd;
}

bool isDuplicate(int num) {
    for (int i = 0; i < 3; i++) {
        if (lastRandomNumbers[i] == num) {
            return true;
        }
    }
    return false;
}

void fadeIn(int rnd, String* arr, int speed) {
  for (int i = 0; i <= 15; i++) {
    myDisplay.setIntensity(i);
    myDisplay.print(arr[rnd]);
    delay(speed);
  }
}

void fadeOut(int rnd, String* arr, int speed) {
  for (int i = 15; i >= 0; i--) {
    myDisplay.setIntensity(i);
    myDisplay.print(arr[rnd]);
    delay(speed);
  }
}
